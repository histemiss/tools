#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.6.8 on Wed Jan 15 15:02:48 2014
#

import wx
import wx.grid

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
#import ques

class QuesGrid(wx.grid.PyGridTableBase):
    QuesCol = ['VAR题号', '题目主干', '过滤条件', '题目选项', '题目属性', 'base', '结果位置' ]
    QUES_VAR = 0
    QUES_TRUNK = 1
    QUES_FILT = 2
    QUES_OPTI = 3
    QUES_FEAT = 4
    QUES_BASE = 5
    QUES_RESU = 6

    def __init__(self):
        super(QuesGrid, self).__init__()
        self.all_ques = []

    def ResetQues(self):
        #打开VAR文件后,根据解析结果更新grid
        pass

    def CanHaveAttributes(self):
        return True

    #columes
    def GetColLabelValue(self, col):
        return QuesGrid.QuesCol[col]

    def GetNumberCols(self):
        return len(QuesGrid.QuesCol)

    #rows
    def GetNumberRows(self):
        return len(self.all_ques) 

    def GetRowLabelValue(self, row):
        return str(row)

    #cell value
    def GetValue(self, row, col):
        if len(self.all_ques) == 0:
            return '没有数据'

        pq = self.all_ques[row]
        q = pq.question
        
        if col == QuesGrid.QUES_VAR:
            return q.question.V_name
        elif col == QuesGrid.QUES_TRUNK:
            return q.question.long_name
        elif col == QuesGrid.QUES_FILT:
            if q.condition:
                return q.condition.output
            return ''
        elif col == QuesGrid.QUES_OPTI:
            return '选项'
        elif col == QuesGrid.QUES_FEAT:
            return '属性'
        elif col == QuesGrid.QUES_BASE:
            return pq.base
        elif col == QuesGrid.QUES_RESU:
            return "%d,%d" % (q.question.col_start, q.question.col_width)

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):

        #创建gridtable
        self.gt = QuesGrid()

        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_main_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_main_menubar.Append(wxglade_tmp_menu, ("&File"))
        wxglade_tmp_menu = wx.Menu()
        self.frame_main_menubar.Append(wxglade_tmp_menu, ("&Tools"))
        self.SetMenuBar(self.frame_main_menubar)
        # Menu Bar end
        self.frame_main_statusbar = self.CreateStatusBar(2, 0)
        self.window_spli = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3DSASH)
        self.pane_up = wx.ScrolledWindow(self.window_spli, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.button_filter = wx.Button(self.pane_up, wx.ID_ANY, (u"\u67e5\u8be2"))
        self.button_reset = wx.Button(self.pane_up, wx.ID_ANY, (u"\u91cd\u65b0\u67e5\u8be2"))
        self.button_choose = wx.Button(self.pane_up, wx.ID_ANY, (u"\u5168\u90e8\u9009\u4e2d"))
        self.text_ctrl_var = wx.TextCtrl(self.pane_up, wx.ID_ANY, "")
        self.text_ctrl_q = wx.TextCtrl(self.pane_up, wx.ID_ANY, "")
        self.text_ctrl_trunk = wx.TextCtrl(self.pane_up, wx.ID_ANY, "")
        self.text_ctrl_filter = wx.TextCtrl(self.pane_up, wx.ID_ANY, "")
        self.static_line_up = wx.StaticLine(self.pane_up, wx.ID_ANY, style=wx.LI_VERTICAL)
        self.checkbox_grid = wx.CheckBox(self.pane_up, wx.ID_ANY, ("Grid"))
        self.checkbox_top2 = wx.CheckBox(self.pane_up, wx.ID_ANY, ("Top2"))
        self.checkbox_mean = wx.CheckBox(self.pane_up, wx.ID_ANY, ("Mean"))
        self.pane_down = wx.ScrolledWindow(self.window_spli, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.grid_ques = wx.grid.Grid(self.pane_down, wx.ID_ANY, size=(1, 1))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(("NToQ"))
        self.SetSize((829, 732))
        self.frame_main_statusbar.SetStatusWidths([-1, 0])
        # statusbar fields
        frame_main_statusbar_fields = [("VAR"), ("saved")]
        for i in range(len(frame_main_statusbar_fields)):
            self.frame_main_statusbar.SetStatusText(frame_main_statusbar_fields[i], i)
        self.pane_up.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.pane_up.SetScrollRate(0, 0)

        #grid
        self.grid_ques.SetTable(self.gt, True)
        self.grid_ques.SetBackgroundColour(wx.Colour(255, 255, 255))

        self.pane_down.SetScrollRate(0, 0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_down = wx.BoxSizer(wx.HORIZONTAL)
        sizer_up = wx.BoxSizer(wx.HORIZONTAL)
        sizer_up_right = wx.BoxSizer(wx.VERTICAL)
        sizer_ques_chec = wx.BoxSizer(wx.VERTICAL)
        sizer_filter = wx.BoxSizer(wx.VERTICAL)
        sizer_options = wx.BoxSizer(wx.HORIZONTAL)
        sizer_option_value = wx.BoxSizer(wx.VERTICAL)
        sizer_option_name = wx.BoxSizer(wx.VERTICAL)
        sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_buttons.Add(self.button_filter, 0, wx.ADJUST_MINSIZE, 0)
        sizer_buttons.Add(self.button_reset, 0, wx.ADJUST_MINSIZE, 0)
        sizer_buttons.Add(self.button_choose, 0, wx.ADJUST_MINSIZE, 0)
        sizer_filter.Add(sizer_buttons, 0, wx.EXPAND, 0)
        static_line_filter = wx.StaticLine(self.pane_up, wx.ID_ANY)
        sizer_filter.Add(static_line_filter, 0, wx.ALL | wx.EXPAND, 10)
        label_var = wx.StaticText(self.pane_up, wx.ID_ANY, (u"VAR\u9898\u53f7"), style=wx.ALIGN_RIGHT)
        sizer_option_name.Add(label_var, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        label_q = wx.StaticText(self.pane_up, wx.ID_ANY, (u"Q\u9898\u53f7"), style=wx.ALIGN_RIGHT)
        sizer_option_name.Add(label_q, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        label_trunk = wx.StaticText(self.pane_up, wx.ID_ANY, (u"\u9898\u5e72"), style=wx.ALIGN_RIGHT)
        sizer_option_name.Add(label_trunk, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        label_filter = wx.StaticText(self.pane_up, wx.ID_ANY, (u"\u8fc7\u6ee4\u6761\u4ef6"), style=wx.ALIGN_RIGHT)
        sizer_option_name.Add(label_filter, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        sizer_options.Add(sizer_option_name, 1, wx.EXPAND | wx.ALIGN_RIGHT | wx.ADJUST_MINSIZE, 0)
        sizer_option_value.Add(self.text_ctrl_var, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        sizer_option_value.Add(self.text_ctrl_q, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        sizer_option_value.Add(self.text_ctrl_trunk, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        sizer_option_value.Add(self.text_ctrl_filter, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        sizer_options.Add(sizer_option_value, 5, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
        sizer_filter.Add(sizer_options, 0, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
        sizer_up.Add(sizer_filter, 1, wx.ALL | wx.EXPAND, 20)
        sizer_up.Add(self.static_line_up, 0, wx.ALL | wx.EXPAND, 10)
        label_up_right = wx.StaticText(self.pane_up, wx.ID_ANY, (u"\u9690\u85cf\u7279\u6b8a\u95ee\u9898"), style=wx.ALIGN_CENTRE)
        sizer_up_right.Add(label_up_right, 1, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 5)
        sizer_ques_chec.Add(self.checkbox_grid, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ADJUST_MINSIZE, 0)
        sizer_ques_chec.Add(self.checkbox_top2, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ADJUST_MINSIZE, 0)
        sizer_ques_chec.Add(self.checkbox_mean, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ADJUST_MINSIZE, 0)
        sizer_up_right.Add(sizer_ques_chec, 4, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_up.Add(sizer_up_right, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 20)
        self.pane_up.SetSizer(sizer_up)
        sizer_down.Add(self.grid_ques, 1, wx.EXPAND, 0)
        self.pane_down.SetSizer(sizer_down)
        self.window_spli.SplitHorizontally(self.pane_up, self.pane_down)
        sizer_main.Add(self.window_spli, 1, wx.EXPAND, 1)
        self.SetSizer(sizer_main)
        self.Layout()
        # end wxGlade

# end of class MainFrame
if __name__ == "__main__":
    gettext.install("NToQ") # replace with the appropriate catalog name

    NToQ = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_main = MainFrame(None, wx.ID_ANY, "")
    NToQ.SetTopWindow(frame_main)
    frame_main.Show()
    NToQ.MainLoop()
